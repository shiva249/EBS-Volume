#!/bin/bash

# Set AWS region
AWS_REGION="us-west-2"

# Define output file
OUTPUT_FILE="ebs_snapshots.csv"

# Get the list of snapshots with creation dates
echo "SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE
aws ec2 describe-snapshots --region $AWS_REGION --query 'Snapshots[*].[SnapshotId,VolumeId,StartTime]' --output text | while read line; do
    SNAPSHOT_ID=$(echo $line | awk '{print $1}')
    VOLUME_ID=$(echo $line | awk '{print $2}')
    START_TIME=$(echo $line | awk '{print $3}')

    # Append the details to the output file
    echo "$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
done

# Notify user
echo "EBS snapshots list with creation dates has been saved to $OUTPUT_FILE"



-----------------
#!/bin/bash

# Define regions to check
REGIONS=("us-east-2" "eu-west-1")

# Define output file
OUTPUT_FILE="ebs_snapshots.csv"

# Initialize the output file with a header
echo "Region,SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE

# Loop through each region and fetch snapshots
for REGION in "${REGIONS[@]}"; do
    echo "Checking snapshots in region: $REGION"
    aws ec2 describe-snapshots --region $REGION --query 'Snapshots[*].[SnapshotId,VolumeId,StartTime]' --output text | while read line; do
        SNAPSHOT_ID=$(echo $line | awk '{print $1}')
        VOLUME_ID=$(echo $line | awk '{print $2}')
        START_TIME=$(echo $line | awk '{print $3}')
        
        # Append the details to the output file
        echo "$REGION,$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
    done
done

# Notify user
echo "EBS snapshots list with creation dates has been saved to $OUTPUT_FILE"


-----------

#!/bin/bash

# Define regions to check
REGIONS=("us-east-2" "eu-west-1")

# Define output file
OUTPUT_FILE="ebs_snapshots.csv"

# Initialize the output file with a header
echo "Region,SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE

# Get your AWS account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Loop through each region and fetch snapshots
for REGION in "${REGIONS[@]}"; do
    echo "Checking snapshots in region: $REGION"
    aws ec2 describe-snapshots --region $REGION --owner-ids $ACCOUNT_ID --query 'Snapshots[?State==`completed`].[SnapshotId,VolumeId,StartTime]' --output text | while read line; do
        SNAPSHOT_ID=$(echo $line | awk '{print $1}')
        VOLUME_ID=$(echo $line | awk '{print $2}')
        START_TIME=$(echo $line | awk '{print $3}')
        
        # Append the details to the output file
        echo "$REGION,$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
    done
done

# Notify user
echo "EBS snapshots list with creation dates has been saved to $OUTPUT_FILE"
---------
print between 2019 and 2022

#!/bin/bash

# Define regions to check
REGIONS=("us-east-2" "eu-west-1")

# Define output file
OUTPUT_FILE="ebs_snapshots.csv"

# Initialize the output file with a header
echo "Region,SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE

# Get your AWS account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Function to check if a date is within the range
is_date_in_range() {
    DATE=$1
    START_DATE="2019-01-01T00:00:00Z"
    END_DATE="2022-12-31T23:59:59Z"

    if [[ "$DATE" > "$START_DATE" && "$DATE" < "$END_DATE" ]]; then
        echo 1
    else
        echo 0
    fi
}

# Loop through each region and fetch snapshots
for REGION in "${REGIONS[@]}"; do
    echo "Checking snapshots in region: $REGION"
    aws ec2 describe-snapshots --region $REGION --owner-ids $ACCOUNT_ID --query 'Snapshots[?State==`completed`].[SnapshotId,VolumeId,StartTime]' --output text | while read line; do
        SNAPSHOT_ID=$(echo $line | awk '{print $1}')
        VOLUME_ID=$(echo $line | awk '{print $2}')
        START_TIME=$(echo $line | awk '{print $3}')
        
        # Check if the snapshot creation date is within the specified range
        if [ $(is_date_in_range $START_TIME) -eq 1 ]; then
            # Append the details to the output file
            echo "$REGION,$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
        fi
    done
done

# Notify user
echo "EBS snapshots created between 2019 and 2022 have been saved to $OUTPUT_FILE"

---------------
Delete snapshots between 2019 and 2022


#!/bin/bash

# Define regions to check
REGIONS=("us-east-2" "eu-west-1")

# Define output file
OUTPUT_FILE="ebs_snapshots.csv"

# Initialize the output file with a header
echo "Region,SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE

# Get your AWS account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Function to check if a date is within the range
is_date_in_range() {
    DATE=$1
    START_DATE="2019-01-01T00:00:00Z"
    END_DATE="2022-12-31T23:59:59Z"

    if [[ "$DATE" > "$START_DATE" && "$DATE" < "$END_DATE" ]]; then
        echo 1
    else
        echo 0
    fi
}

# Loop through each region and fetch snapshots
for REGION in "${REGIONS[@]}"; do
    echo "Checking snapshots in region: $REGION"
    aws ec2 describe-snapshots --region $REGION --owner-ids $ACCOUNT_ID --query 'Snapshots[?State==`completed`].[SnapshotId,VolumeId,StartTime]' --output text | while read line; do
        SNAPSHOT_ID=$(echo $line | awk '{print $1}')
        VOLUME_ID=$(echo $line | awk '{print $2}')
        START_TIME=$(echo $line | awk '{print $3}')
        
        # Check if the snapshot creation date is within the specified range
        if [ $(is_date_in_range $START_TIME) -eq 1 ]; then
            # Append the details to the output file
            echo "$REGION,$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
            echo "Deleting snapshot $SNAPSHOT_ID created on $START_TIME in region $REGION"
            aws ec2 delete-snapshot --region $REGION --snapshot-id $SNAPSHOT_ID
        fi
    done
done

# Notify user
echo "EBS snapshots created between 2019 and 2022 have been saved to $OUTPUT_FILE and deleted."


------------------------------------------------------------------------------

AMIs and snapshots

#!/bin/bash

# Define the date range
START_DATE="2019-01-01"
END_DATE="2022-12-31"

# Define the output file
OUTPUT_FILE="ami_and_snapshots.csv"

# Initialize the output file with a header
echo "Region,ImageID,Name,CreationDate,SnapshotID,VolumeID,StartTime" > $OUTPUT_FILE

# Get your AWS account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Define the regions to check
REGIONS=("us-east-1")

# Function to check if a date is within the range
is_date_in_range() {
    DATE=$1
    START_DATE="2019-01-01T00:00:00Z"
    END_DATE="2022-12-31T23:59:59Z"

    if [[ "$DATE" > "$START_DATE" && "$DATE" < "$END_DATE" ]]; then
        echo 1
    else
        echo 0
    fi
}

# Loop through each region
for REGION in "${REGIONS[@]}"; do
    echo "Processing region: $REGION"
    
    # Get the list of AMIs created by you in the specified date range
    AMIS=$(aws ec2 describe-images --region $REGION --owners self --query "Images[?CreationDate>='$START_DATE' && CreationDate<='$END_DATE'].[ImageId,Name,CreationDate]" --output json)
    
    # Iterate over each AMI
    echo "$AMIS" | jq -c '.[]' | while read ami; do
        IMAGE_ID=$(echo $ami | jq -r '.[0]')
        NAME=$(echo $ami | jq -r '.[1]')
        CREATION_DATE=$(echo $ami | jq -r '.[2]')
        
        # Get the snapshots associated with the AMI
        SNAPSHOTS=$(aws ec2 describe-snapshots --region $REGION --owner-ids $ACCOUNT_ID --filters Name=description,Values="*${IMAGE_ID}*" --query "Snapshots[?StartTime>='$START_DATE' && StartTime<='$END_DATE'].[SnapshotId,VolumeId,StartTime]" --output json)
        
        # Iterate over each snapshot and write to the output file
        echo "$SNAPSHOTS" | jq -c '.[]' | while read snapshot; do
            SNAPSHOT_ID=$(echo $snapshot | jq -r '.[0]')
            VOLUME_ID=$(echo $snapshot | jq -r '.[1]')
            START_TIME=$(echo $snapshot | jq -r '.[2]')
            
            # Check if the snapshot creation date is within the specified range
            if [ $(is_date_in_range $START_TIME) -eq 1 ]; then
                echo "$REGION,$IMAGE_ID,$NAME,$CREATION_DATE,$SNAPSHOT_ID,$VOLUME_ID,$START_TIME" >> $OUTPUT_FILE
            fi
        done
    done
done

# Notify the user
echo "AMIs and associated snapshots created between 2019 and 2022 have been saved to $OUTPUT_FILE"

