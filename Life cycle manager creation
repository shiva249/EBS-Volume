import boto3

def lambda_handler(event, context):
    regions = ["us-east-2", "eu-west-1"]
    policy_name = "DailySnapshotPolicy"
    description = "Daily snapshots with 7-day retention"
    target_tag_key = "Backup"
    target_tag_value = "true"
    schedule_name = "DailySnapshots"
    retention_days = 7

    # Get AWS account ID
    sts_client = boto3.client('sts')
    account_id = sts_client.get_caller_identity()["Account"]
    role_arn = f"arn:aws:iam::{account_id}:role/AWSDataLifecycleManagerDefaultRole"
    
    for region in regions:
        dlm_client = boto3.client('dlm', region_name=region)
        
        response = dlm_client.create_lifecycle_policy(
            ExecutionRoleArn=role_arn,
            Description=description,
            State='ENABLED',
            PolicyDetails={
                'ResourceTypes': ['VOLUME'],
                'TargetTags': [{'Key': target_tag_key, 'Value': target_tag_value}],
                'Schedules': [{
                    'Name': schedule_name,
                    'CreateRule': {'Interval': 24, 'IntervalUnit': 'HOURS'},
                    'RetainRule': {'Count': retention_days}
                }]
            }
        )
        
        policy_id = response['PolicyId']
        print(f"Created lifecycle policy in region {region} with policy ID {policy_id}")
    
    return {
        'statusCode': 200,
        'body': "Lifecycle policies have been created."
    }
---------------------------------------------------------------------------
2: Backup policy for different retentions
----------------------------------------------
import boto3

def lambda_handler(event, context):
    regions = ["us-east-1"]
    target_tag_key = "Backup"
    target_tag_value = "true"
    
    # Descriptions for different backup schedules
    daily_description = "Daily snapshots with 7-day retention"
    weekly_description = "Weekly snapshots every Sunday at 12 AM UTC with 30-day retention"
    monthly_description = "Monthly snapshots on the 1st of every month with 180-day retention"
    
    # Retention periods
    daily_retention_days = 7
    weekly_retention_days = 30
    monthly_retention_days = 180

    # Get AWS account ID
    sts_client = boto3.client('sts')
    account_id = sts_client.get_caller_identity()["Account"]
    role_arn = f"arn:aws:iam::{account_id}:role/AWSDataLifecycleManagerDefaultRole"
    
    for region in regions:
        dlm_client = boto3.client('dlm', region_name=region)
        
        # Create lifecycle policy for daily, weekly, and monthly snapshots
        response = dlm_client.create_lifecycle_policy(
            ExecutionRoleArn=role_arn,
            Description="Snapshot lifecycle policy",
            State='ENABLED',
            PolicyDetails={
                'ResourceTypes': ['VOLUME'],
                'TargetTags': [{'Key': target_tag_key, 'Value': target_tag_value}],
                'Schedules': [
                    {
                        'Name': "DailySnapshots",
                        'CreateRule': {
                            'Interval': 24,
                            'IntervalUnit': 'HOURS'
                        },
                        'RetainRule': {'Count': daily_retention_days},
                        'CopyTags': True
                    },
                    {
                        'Name': "WeeklySnapshots",
                        'CreateRule': {
                            'CronExpression': 'cron(0 0 ? * 7 *)'  # Every Sunday at 12 AM UTC
                        },
                        'RetainRule': {'Count': weekly_retention_days},
                        'CopyTags': True
                    },
                    {
                        'Name': "MonthlySnapshots",
                        'CreateRule': {
                            'CronExpression': 'cron(0 0 1 * ? *)'  # On the 1st of every month at 12 AM UTC
                        },
                        'RetainRule': {'Count': monthly_retention_days},
                        'CopyTags': True
                    }
                ]
            }
        )
        
        policy_id = response['PolicyId']
        print(f"Created lifecycle policy in region {region} with policy ID {policy_id}")
    
    return {
        'statusCode': 200,
        'body': "Daily, Weekly, and Monthly lifecycle policies have been created."
    }
